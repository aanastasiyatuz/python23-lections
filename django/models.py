"==========================Немного теории=========================="

# Model - класс, который характеризует структуру вашей таблицы в бд, где аттрибуты - поля в таблице (наследуется от класса django.db.models.Model)
# Manager - класс, который предоставляет доступ через методы к ОРМ django (которая в свою очередь отправляет запросы в бд)
# По умолчанию manager добавляется в аттрибут objects в модель
# Если хотите переопределить у обычной модели manager, то наследуйте manager от django.db.models.Manager
# подробнее о managers https://django.fun/docs/django/ru/4.0/topics/db/managers

"==========================Поля=========================="
# Все поля наследуются от класса django.db.models.Field

'CharField' # - для строковых значений (обязательно нужно указывать max_length)
'SlugField' # - для хранения slug (короткая метка для чего-либо, содержащая только буквы, цифры, подчеркивания или дефисы. Они обычно используются в URL) (работает как CharField, но есть проверки на недопустимые символы)
'TextField' # - для хранения текста
'DecimalField' # - для дробных чисел (два обязательных аргумента: max_digits (кол-во цифр целой части), decimal_places (кол-во цифр дробной части))
'IntegerField' # - для чисел
'BooleanField' # - для bool значений

'DateField' # - для дат (питоновская версия - datetime.date) (можно указать auto_now - обновляется каждый раз когда запись обновляется, auto_now_add - задается при создании обьекта)
'TimeField' # - для хранения только времени (тоже есть auto_now и auto_now_add)
'DateTimeField' # - для дат и времени (тоже самое, что и DateField, но еще время добавляется)
'DurationField' # - для периодов времени

'EmailField' # - для email (имеет встроенную проверку)
'FileField' # - для загрузки файлов (upload_to - для указания директории, где будут хранится файлы, в базе данных будет хранится лишь путь до них)
'ImageField' # - для загрузки фотографий (тоже самое, что и FileField, но требуется библеотека Pillow)
'JSONField' # - для хранения строк в формате json

"--------ключевые параметры для полей--------"
'null' # - если True, будет ставить в бд обьект null, если данные не переданы
'blank' # - (больше для строковых полей) если True, будет ставить пустую строку, если данные не переданы
'choices' # - позволяет ограничить возможные варианты записей в это поле. нужно передать список с кортежами, где первый элемент - то, что будет в бд, а второе - то, что будет отображаться
'db_index' # - если True, то создаст btree для этого поля
'default' # - добавляет значение, если данные не переданы
'editable' # - если False, то запись нельзя будет поменять
'primary_key' # - если True, то это поле будет первичным ключом в этой таблице (по дефолту django создает id)
'unique' # - если True, то будет вызываться ошибка при попытке создать запись с такими же данными, которые уже есть в таблице
'validators' # - список для проверки поля (https://django.fun/docs/django/ru/4.0/ref/validators)



"==========================Связи=========================="

'ForeignKey' # - связь один ко многим (обязательно указать модель на которую будет ссылаться (можно название ввиде строки), и on_delete) (так же можно указать как можно будет обращаться с другой модели с помощью related_name)
'ManyToMany' # - связь многие ко многим (все тоже самое, что и ForeignKey)
'OneToOne' # - связь один к одному (все тоже самое, что и ForeignKey)

'--------on_delete--------'
'models.CASCADE' # - каскадное удаление (если удаляется главный обьект - удаляются и все зависящие от него обьекты (например, если удалить пост, то и все комментарии к нему удалятся))
'models.PROTECT' # - вызывает ошибку при попытке удаления главного обьекта
'models.RESTRICT' # - в отличие от PROTECT, удаление главного объекта допускается, если он также ссылается на другой объект, который удаляется в той же операции, но через отношение CASCADE.
'models.SET_NULL' # - не удаляет зависящие обьекты, а ставит null (только если null=True)
'models.SET_DEFAULT' # - ставит default (только если был определен default)
'models.DO_NOTHING' # - вообще ничего не делает, так что ошибка будет)

