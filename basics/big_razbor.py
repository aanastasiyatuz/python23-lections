"=========================Типы данных в python========================"
# immutable - неизменяемые (str, int, float, tuple, bool, None, frozenset)
# mutable - изменяемые (list, dict, set)

"----------------------------Numbers----------------------------"
# числа - неизменяемый тип данных, предназначенный для хранения числовых значений и проведения над ними арифметических действий

int # целые числа
float # вещественные, дробные, десятичные, с плавающей точкой
decimal # десятичные, но более точные
complex # комплексные 5 + 6i - 3j + 5k
long # огромные числа


"----------------------------Strings----------------------------"
# строка - неизменяемый тип данных, который предстваляет собой упорядоченную последовательность символов, заключенных в двойные или одинарные кавычки

string1 = 'hello'
string2 = "hello"
# error = 'hello"

"----------------------------Индексы----------------------------"
# индексы - нумерация элементов в последовательности (начиная с 0)
string = 'hello world'
string[0] == 'h'
string[5] == ' '
string[-1] == 'd'
string[-3] == 'r'

list1 = ['hello', 10, True]
list1[0] == 'hello'
list1[-1] == True

"----------------------------Срезы----------------------------"
# срез - часть последовательности (подпоследовательность)
# [start : end : step]
# [0 : len(iter) : 1]
string = 'some string'
string[1:6] # 'ome s' (1,2,3,4,5)
string[:6] # 'some s' (0,1,2,3,4,5)
string[5:] # 'string' (5,6,7,8,9,10)
string[:] # 'some string' (0,1,2,3,4,5,6,7,8,9,10)
string[::2] # 'sm tig' (0,2,4,6,8,10)
string[1::3] # 'o rg' (1,4,7,10)
string[::-1] # 'gnirts emos' (10,9,8,7,6,5,4,3,2,1,0)

"=============================List============================="
# список - изменяемый, упорядоченный и итерируемый тип данных, который хранит в себе последовательность элементов
list1 = [5, 'str', (4,None), False, [1,2,3,4,5]]

# list1[1] == 'str'
list1[1] = 'hello'
[5, 'hello', (4,None), False, [1,2,3,4,5]]


"================================Tuple================================"
# кортеж - неизменяемый список
tuple1 = 1,2,3,4,5 # (1,2,3,4,5)
tuple2 = (1,) # tuple
not_tuple3 = (1) # int
tuple4 = 1, # tuple

"=================================Set================================="
# множество - изменяемый, неупорядоченный тип данных, который хранит в себе только уникальные значения
set1 = {1,2,1,2,3} # {1,2,3}
# для set: 1 == True, 0 == False
set2 = {1, 0, True, False} # {1,0}
set3 = {True, 0, False, 1} # {True, 0}
# {} - пустой dict
# set() - пустой set

"==============================Frozenset=============================="
# неизменяемое множество
f_set1 = frozenset([1,2,2,1,3,4,2]) # {1,2,3,4}
# все методы, которые были у set для изменения, во frozenset отсутсвуют

"================================Dict================================"
# словарь - изменяемый, неупорядоченный тип данных, для хранения данных в парах (ключ:значение) 
# ключи - должны быть неизменяемым типом данных
# если ключом будет tuple, то в нем тоже должны быть только неизменяемые типы данных
# если ключ повторяется - значение перезаписывается на последнее

dict1 = {'a':1, 'b':2, 'a':3} # {'a':3, 'b':2}


"================================Bool================================"
# bool - логический тип данных, с двумя значениями (True, False)

"================================None================================"
# None - тип данных, для обозначения отсутсвия значения


"=============================Conditions============================="
# условия - конструкция, которая позволяет выполнять или не выполнять какой-то кусочек кода, который находится в теле условия (сдвинуто на tab)

if True:
    print("условие верное")
else:
    print("условие не верное")


"=======================Тернарные выражения======================="
# условие, которое написанно в одну строку и возвращает одно из двух результатов в зависимости от условия
"res1" if True else "res2"


"==============================Циклы=============================="
# блок кода, который будет выполняться несколько раз. Каждый круг называется итерацией (итерируемые обьекты - те, по которым можно пройтись циклом for)

# break - инструкция, которая немедленно прерывает работу цикла

# continue - инструкция, которая немедленно переходит к следующей итерации

"------------------------------For------------------------------"
# цикл, который проходится по итерируемым обьектам (str, list, set, dict, tuple, range). В цикле for мы выполняем операции над каждым элементом итерируемого обьекта

list1 = [1,2,3,4,5,6,7]
for element in list1:
    print(element)
# 1\n2\n3\n4\n5\n6\n7\n

"-----------------------------While-----------------------------"
# цикл, который повторяет код пока условие верное (может быть бесконечным)


"Tasks"
3
name_of_list = ['hello']
string = name_of_list[0]
middle = round(len(string)/2 + 0.1)
left = string[:middle]
right = string[middle:]
res = right + left
new_list = list(res)
# print(new_list)

suitcase = []
suitcase.append('футболка')
suitcase.append('шорты')
suitcase.append('сланцы')
suitcase.append('очки')
suitcase.append('кепка')
res = suitcase.pop()
suitcase.insert(0, 'панама')
suitcase.insert(2, 'что-то')
# print(suitcase.pop(2))
# print(suitcase)


from collections import Counter

string = "pythonist" 
# print(dict(Counter(string)))


dict_ = {
    'math': {
        'sum':sum,
        'max':max,
        'sjhf':len
    },
    'vars': {
        'a':1,
        'b':465,
        'c':235,
        'd':245
    }
}

func = dict_['math']['sum']
values = dict_['vars'].values()
res = func(values)
print(res) # 946 (работает функция sum)

res = dict_['math']['sjhf']('hello')
print(res) # 5 (работает функция len)