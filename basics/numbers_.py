"===============================Числа==============================="
# integers(int) - целые числа

a = 5
print(type(a))  # <class 'int'>

b = int('10')
print(type(b))  # <class 'int'>

# c = int('10a')
# ValueError: invalid literal for int() with base 10: '10a'


# float - вещественные числа (с плавающей точкой, десятичные)

a = 10.5
print(type(a))  # <class 'float'>

b = float(23)
print(b)  # 23.0

c = float('45.3')
print(type(c))  # <class 'float'>

print(0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1)  # 0.9999999999999999



# decimal - точное вещественное число
# чтобы использовать decimal, нужно его импортировать

from decimal import Decimal
a = Decimal('0.1')
print(a + a + a + a + a + a + a + a + a + a)  # 1.0


# binary(bin) - числа в двоичной системе исчисления
a = bin(10)
print(a)  # 0b1010
print(int(a, 2))

# hex (16 система исчисления)
b = hex(10)
print(b)  # 0xa
print(int(b, 16))


# complex - комплексные числа (2i+2j+3k)
a = complex(1, 5)
print(a)


"============================Операции над числами============================"
5 + 7  # сложение
10 - 6  # вычитание
2 * 4  # умножение
15 / 5  # 3.0  деление
7 // 2  # 3 целочисленное деление
5 % 2  # 1 остаток от деления
2 ** 3  # 8 возведение в степень
25**0.5  # 5 нахождение кв корня числа

# модуль числа - из отрицательного числа получаем положительное |-5| = 5
print(abs(-5))  # 5
print(abs(10))  # 10
print(abs(-0.1))  # 0.1

# round - округление числа
print(round(5.6))  # 6 (округление в большую сторону)
print(round(5.4))  # 5
print(round(5.5))  # 6
print(round(5.49))  # 5 (округление идет только по первой цифре после точки)

# можно указать количество цифр после запятой
print(round(10.0476, 3))  # 10.048
print(round(10.0476, 2))  # 10.05


# sqrt - функция для нахождения кв корня числа
# его нужно импортировать
from math import sqrt
print(sqrt(25))  # 5.0
print(sqrt(36))  # 6.0
print(sqrt(34))  # 5.830951894845301


# pow:
# 1. возводит число в степень
# 2. находит остаток от деления на 3 число

print(pow(2, 3))  # 2 ** 3 = 8
print(pow(2, 3, 4))  # 8 % 4 = 0
# (2 ** 3) % 4 = 0


# divmod - функция, которая возвращает 2 числа, где 1 - целая часть от деления, 2 - остаток от деления
print(divmod(5, 2))  # 2, 1
print(divmod(17, 3))  # 5, 2
# 17 // 3 = 5
# 17 % 3 = 2
